@page "/Motor"
@inject BackgroundDataService backgroundData;
@inject NavigationManager NavigationManager
@using BlazorBootstrap;
@using Lux.DriverInterface.Shared;

<PageTitle>Lux Dashboard - Motor</PageTitle>

<Header />
<h1 class="center-line">Motor</h1>

<div class="container">
    <article style="position: absolute; top: 20px; left: 0px">
        <p>RPM</p>
        <div>
            <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Success" Width="20" />
            </BlazorBootstrap.Progress>
        </div>
        <p>XXXX RPM</p>
    </article>

    <article style="position: absolute; top: 20px; left: 240px">
        <p>Temperature</p>
        <div>
            <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Warning" Width="100" />
            </BlazorBootstrap.Progress>
        </div>
        <p>XXX &#176;F</p>
    </article>

    <article style="position: absolute; top: 20px; left: 480px">
        <p>Filler</p>
        <div>
            <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Info" Width="60" />
            </BlazorBootstrap.Progress>
        </div>
        <p>XXX Filler</p>
    </article>
</div>

@code
{
    protected CancellationTokenSource CancellationSource = new();

    // Don't forget to unsubscribe from the event when the component is disposed.
    public void Dispose()
    {
        CancellationSource.Cancel();
        backgroundData.OnChange -= StateHasChanged;

        CancellationSource.Dispose();
    }
    protected override async void OnInitialized()
    {
        backgroundData.OnChange += StateHasChanged;
        await backgroundData.StartAsync(CancellationSource.Token);

        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        string navigationMethod = args.IsNavigationIntercepted ? "HTML" : "code";
    }
}
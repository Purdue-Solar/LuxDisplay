@page "/Solar"
@inject Header helper;
@inject TimerService TimerService;
@inject NavigationManager NavigationManager;
@using BlazorBootstrap;
@using Lux.DriverInterface.Shared;
    <style>
        body {
            background-color: white;
        }

        h1 {
            color: black;
            text-align: center;
        }

        p {
            color: black;
        }

        .container{
            position: relative;
        }
        .maximum {
            position: absolute;
            height: 40px;
            width: 200px;
            background: white;
            outline-width: thin;
            outline-style: solid;
            outline-color: black;
            display: inline;
        }

        .battery-level {
            position: absolute;
            height: 40px;
            width: 75%;
            background: #32CD32;
            text-align: center;
        }

        .voltage {
            position: absolute;
            height: 40px;
            width: 100%;
            background: #FFFFFF;
            text-align: left;
        }

        .time {
            position: absolute;
            height: 40px;
            width: 30%;
            background: #11FAF5;
            text-align: left;
        }
    </style>
    <head>
    </head>
    <body>
    <div style="display:grid">
        <table>
            <tr>
                <td style="width:25%">
                    @if (blinkerValLeft && helper.BlinkerToggleLeft)
                    {
                        <h1 style="font-size:70px"><Icon Name="IconName.ArrowLeftCircleFill" /></h1>
                    }
                    else
                    {
                        <h1 style="font-size:70px"><Icon Name="IconName.ArrowLeftCircleFill" Color="IconColor.Muted" /></h1>
                    }
                </td>
                <td style="width:25%">
                    <h1>@(helper.Speed)</h1> <h4>MPH</h4>
                </td>
                <td style="width:25%">
                    <h1>@(helper.RPM)</h1> <h4>RPM</h4>
                </td>
                <td style="width:25%">
                    @if (blinkerValRight && helper.BlinkerToggleRight)
                    {
                        <h1 style="font-size:70px"><Icon Name="IconName.ArrowRightCircleFill" /></h1>
                    }
                    else
                    {
                        <h1 style="font-size:70px"><Icon Name="IconName.ArrowRightCircleFill" Color="IconColor.Muted" /></h1>
                    }
                </td>
            </tr>
        </table>
    </div>
        <h1>Solar</h1>

        <div class="container">
            <article style="position: absolute; top: 20px; left: 0px">
                <p>Power In</p>
                <div>
                    <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                        <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Success" Width="20" />
                    </BlazorBootstrap.Progress>
                </div>
                <p>XXXX Voltage</p>
            </article>

            <article style="position: absolute; top: 20px; left: 240px">
                <p>Temperature</p>
                <div>
                    <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                        <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Warning" Width="100" />
                    </BlazorBootstrap.Progress>
                </div>
                <p>XXX &#176;F</p>
            </article>

            <article style="position: absolute; top: 180px; left: 0px">
                <p>Solar Cell HeatMap:</p>
                <div>
                    //Heatmap here
                </div>
            </article>
        </div>

    </body>

 @code{
    public int timerCount = 0;

    private bool blinkerValLeft = false;
    private bool blinkerValRight = false;

    private void OnTimerElapsed(object sender, int count)
    {
        timerCount = count;

        //Sinals
        if (timerCount % 25 == 0)
        {
            //Left siganl
            if (helper.BlinkerToggleLeft)
            {
                blinkerValLeft = !blinkerValLeft;
            }
            //Right signal
            if (helper.BlinkerToggleRight)
            {
                blinkerValRight = !blinkerValRight;
            }
        }
        StateHasChanged(); // Update the UI
    }

    // Don't forget to unsubscribe from the event when the component is disposed.
    public void Dispose()
    {
        TimerService.OnTimerElapsed -= OnTimerElapsed;
        TimerService.Dispose();
    }
    protected override void OnInitialized()
    {
        TimerService.OnTimerElapsed += OnTimerElapsed;
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        TimerService.OnTimerElapsed -= OnTimerElapsed;
        NavigationManager.LocationChanged -= OnLocationChanged;
        string navigationMethod = args.IsNavigationIntercepted ? "HTML" : "code";
    }
}
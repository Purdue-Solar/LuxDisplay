@page "/SystemHealth"
@inject Header helper;
@inject TimerService TimerService;
@inject NavigationManager NavigationManager;
@using BlazorBootstrap;
@using Lux.DriverInterface.Shared;

<PageTitle>System</PageTitle>
<div style="display:grid">
    <table>
        <tr>
            <td style="width:25%">
                @if (blinkerValLeft && helper.BlinkerToggleLeft)
                {
                    <h1 style="font-size:70px"><Icon Name="IconName.ArrowLeftCircleFill" /></h1>
                }
                else
                {
                    <h1 style="font-size:70px"><Icon Name="IconName.ArrowLeftCircleFill" Color="IconColor.Muted" /></h1>
                }
            </td>
            <td style="width:25%">
                <h1>@(helper.Speed)</h1> <h4>MPH</h4>
            </td>
            <td style="width:25%">
                <h1>@(helper.RPM)</h1> <h4>RPM</h4>
            </td>
            <td style="width:25%">
                @if (blinkerValRight && helper.BlinkerToggleRight)
                {
                    <h1 style="font-size:70px"><Icon Name="IconName.ArrowRightCircleFill" /></h1>
                }
                else
                {
                    <h1 style="font-size:70px"><Icon Name="IconName.ArrowRightCircleFill" Color="IconColor.Muted" /></h1>
                }
            </td>
        </tr>
    </table>
</div>
<h1>System</h1>

<div class="container">
        <article style="position: absolute; top: 200px; left: 200">
            <p>Overall System Health</p>
            <div>
                <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                    <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Success" Width="20" />
                </BlazorBootstrap.Progress>
            </div>
            <p>XX / XXX Systems Up</p>
        </article>

        <article style="position: absolute; top: 350px; left: 200">
            <p>Data Transmission Rate</p>
            <div>
                <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                    <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Success" Width="20" />
                </BlazorBootstrap.Progress>
            </div>
            <p>XXX %</p>
        </article>

        <article style="position: absolute; top: 500px; left: 200">
            <p>CAN Data:</p>
            <div>
                
            </div>
            <p>Value 1:</p>
        </article>

        <article style="position: absolute; top: 650px; left: 200">
            <p>Raw Sensor Data:</p>
            <div>
                
            </div>
            <p>Value 1:</p>
        </article>

</div>

@code
{
    public int timerCount = 0;

    private bool blinkerValLeft = false;
    private bool blinkerValRight = false;
    
    private void OnTimerElapsed(object sender, int count)
    {
        timerCount = count;

        //Sinals
        if (timerCount % 25 == 0)
        {
            //Left siganl
            if (helper.BlinkerToggleLeft)
            {
                blinkerValLeft = !blinkerValLeft;
            }
            //Right signal
            if (helper.BlinkerToggleRight)
            {
                blinkerValRight = !blinkerValRight;
            }
        }
        StateHasChanged(); // Update the UI
    }

    // Don't forget to unsubscribe from the event when the component is disposed.
    public void Dispose()
    {
        TimerService.OnTimerElapsed -= OnTimerElapsed;
        TimerService.Dispose();
    }
    protected override void OnInitialized()
    {
        TimerService.OnTimerElapsed += OnTimerElapsed;
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        TimerService.OnTimerElapsed -= OnTimerElapsed;
        NavigationManager.LocationChanged -= OnLocationChanged;
        string navigationMethod = args.IsNavigationIntercepted ? "HTML" : "code";
    }
}
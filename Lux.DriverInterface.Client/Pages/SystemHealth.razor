@page "/SystemHealth"
@inject BackgroundDataService backgroundData
@inject NavigationManager NavigationManager;
@using BlazorBootstrap;
@using Lux.DriverInterface.Shared;

<PageTitle>Lux Dashboard - System</PageTitle>

<Header />
<h1 class="center-line">System</h1>

<div class="container">
	<article style="position: absolute; top: 200px; left: 200px">
		<p>Overall System Health</p>
		<div>
			<BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
				<BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Success" Width="20" />
			</BlazorBootstrap.Progress>
		</div>
		<p>XX / XXX Systems Up</p>
	</article>

	<article style="position: absolute; top: 350px; left: 200px">
		<p>Data Transmission Rate</p>
		<div>
			<BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
				<BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Success" Width="20" />
			</BlazorBootstrap.Progress>
		</div>
		<p>XXX %</p>
	</article>

	<article style="position: absolute; top: 500px; left: 200px">
		<p>CAN Data:</p>
		<div>
		</div>
		<p>Value 1:</p>
	</article>

	<article style="position: absolute; top: 650px; left: 200px">
		<p>Raw Sensor Data:</p>
		<div>
		</div>
		<p>Value 1:</p>
	</article>

</div>

@code
{
	protected CancellationTokenSource CancellationSource { get; } = new();

	// Don't forget to unsubscribe from the event when the component is disposed.
	public void Dispose()
	{
		CancellationSource.Cancel();
		backgroundData.OnChange -= StateHasChanged;

		CancellationSource.Dispose();
	}
	protected override async void OnInitialized()
	{
		backgroundData.OnChange += StateHasChanged;
		await backgroundData.StartAsync(CancellationSource.Token);

		NavigationManager.LocationChanged += OnLocationChanged;
	}

	void OnLocationChanged(object sender, LocationChangedEventArgs args)
	{
		backgroundData.OnChange -= StateHasChanged;

		NavigationManager.LocationChanged -= OnLocationChanged;
		string navigationMethod = args.IsNavigationIntercepted ? "HTML" : "code";
	}
}
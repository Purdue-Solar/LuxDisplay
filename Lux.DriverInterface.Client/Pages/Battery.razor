@page "/Battery"
@inject HttpClient http
@inject Blinkers blinkers
@inject BackgroundDataService backgroundData
@inject NavigationManager NavigationManager
@using BlazorBootstrap;
@using Lux.DriverInterface.Shared;

<Header />
<h1 class="center-line">Battery</h1>

<div class="container">
    <article style="position: absolute; top: 420px; left: 0">
        <p>Battery Charge</p>
        <div>
            <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Success" Width="20" />
            </BlazorBootstrap.Progress>
        </div>
        <p>XXX %</p>
    </article>

    <article style="position: absolute; top: 420px; left: 240px">
        <p>Voltage</p>
        <div>
            <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Warning" Width="100" />
            </BlazorBootstrap.Progress>
        </div>
        <p>XXX Volts</p>
    </article>

    <article style="position: absolute; top: 420px; left: 480px">
        <p>Estimated Time</p>
        <div>
            <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Info" Width="60" />
            </BlazorBootstrap.Progress>
        </div>
        <p>XX:XX:XX</p>
    </article>

    <article style="position: absolute; top: 420px; left: 720px">
        <p>Total Discharge</p>
        <div>
            <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Info" Width="60" />
            </BlazorBootstrap.Progress>
        </div>
        <p>XX:XX:XX</p>
    </article>

    <article style="position: absolute; top: 620px; left: 0px">
        <p>Total Charge</p>
        <div>
            <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Info" Width="60" />
            </BlazorBootstrap.Progress>
        </div>
        <p>XX:XX:XX</p>
    </article>

    <article style="position: absolute; top: 620px; left: 240px">
        <p>Total Discharge Energy</p>
        <div>
            <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Info" Width="60" />
            </BlazorBootstrap.Progress>
        </div>
        <p>XX:XX:XX</p>
    </article>

    <article style="position: absolute; top: 620px; left: 480px">
        <p>Total Charge Energy</p>
        <div>
            <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Info" Width="60" />
            </BlazorBootstrap.Progress>
        </div>
        <p>XX:XX:XX</p>
    </article>

    <article style="position: absolute; top: 620px; left: 720px">
        <p>Cell Energy</p>
        <div>
            <BlazorBootstrap.Progress Class="mb-3" Height="40" Style="width: 200px">
                <BlazorBootstrap.ProgressBar Color="BlazorBootstrap.ProgressColor.Info" Width="60" />
            </BlazorBootstrap.Progress>
        </div>
        <p>XX:XX:XX</p>
    </article>
</div>

<LineChart @ref="lineChart" Width="800" Class="mb-4" />

@code
{
    ProgressBar progress_totalDischarge;
    ProgressBar progress_totalCharge;
    ProgressBar progress_totalDischargeEnergy;
    ProgressBar progress_totalChargeEnergy;
    ProgressBar progress_cellEnergy;

    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = new ChartData()!;

    protected CancellationTokenSource CancellationSource { get; } = new CancellationTokenSource();

    // Don't forget to unsubscribe from the event when the component is disposed.
    public void Dispose()
    {
        CancellationSource.Cancel();

        backgroundData.OnChange -= StateHasChanged;

        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    protected override async void OnInitialized()
    {
        backgroundData.OnChange += StateHasChanged;
        await backgroundData.StartAsync(CancellationSource.Token);

        NavigationManager.LocationChanged += OnLocationChanged;
        //Line Chart Code
        var colors = ColorBuilder.CategoricalTwelveColors;

        var labels = new List<string> { "10:00", "11:00", "12:00", "13:00", "14:00", "15:00" };
        var datasets = new List<IChartDataset>();

        var dataset1 = new LineChartDataset
        {
            Label = "Current Cell Temperature",
            Data = new List<double> { 10, 35, 20, 16, 8, 15, 20, 25, 30, 35, 21, 19},
            BackgroundColor = new List<string> { colors[0] },
            BorderColor = new List<string> { colors[0] },
            BorderWidth = new List<double> { 2 },
            HoverBorderWidth = new List<double> { 4 },
            PointBackgroundColor = new List<string> { colors[0] },
            PointRadius = new List<int> { 0 }, // hide points
            PointHoverRadius = new List<int> { 4 }
        };
        datasets.Add(dataset1);

        var dataset2 = new LineChartDataset
        {
            Label = "Minimum Cell Temperature",
            Data = new List<double> { 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8 },
            BackgroundColor = new List<string> { colors[1] },
            BorderColor = new List<string> { colors[1] },
            BorderWidth = new List<double> { 2 },
            HoverBorderWidth = new List<double> { 4 },
            PointBackgroundColor = new List<string> { colors[1] },
            PointRadius = new List<int> { 0 }, // hide points
            PointHoverRadius = new List<int> { 4 }
        };
        datasets.Add(dataset2);

        var dataset3 = new LineChartDataset
        {
            Label = "Maximum Cell Temperature",
            Data = new List<double> { 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35 },
            BackgroundColor = new List<string> { colors[2] },
            BorderColor = new List<string> { colors[2] },
            BorderWidth = new List<double> { 2 },
            HoverBorderWidth = new List<double> { 4 },
            PointBackgroundColor = new List<string> { colors[2] },
            PointRadius = new List<int> { 0 }, // hide points
            PointHoverRadius = new List<int> { 4 }
        };
        datasets.Add(dataset3);

        chartData = new ChartData
        {
            Labels = labels,
            Datasets = datasets
        };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X.Title.Text = "Time";
        lineChartOptions.Scales.X.Title.Display = true;

        lineChartOptions.Scales.Y.Title.Text = "Temperature(C)";
        lineChartOptions.Scales.Y.Title.Display = true;

        lineChartOptions.Plugins.Title.Text = "Vehicle Cell Temperature";
        lineChartOptions.Plugins.Title.Display = true;

        //End line chart code
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        string navigationMethod = args.IsNavigationIntercepted ? "HTML" : "code";
    }
}

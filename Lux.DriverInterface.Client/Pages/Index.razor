@page "/"
@using BlazorBootstrap;
@using Lux.DriverInterface.Shared;
@using static Lux.DriverInterface.Shared.Shared;
@inject WaveSculptor ws
@inject MpptCollection mppts;
@inject Lux.DriverInterface.Shared.Battery battery;
@inject Encoder encoder;
@inject Blinkers blinkers;
@inject Distribution distribution;
@inject SteeringWheel steering;
@inject Telemetry telemetry;
@inject BackgroundDataService backgroundData;
@inject NavigationManager NavigationManager;

<PageTitle>Lux Dashboard</PageTitle>

<Header DisplayVelocities="false"></Header>

<div class="container">
	@if (!distribution.Flags.HasFlag(DriverInterface.Shared.CanPackets.Distribution.Status.StatusFlags.DcDcValid))
	{
		<div class="row-data">
			<h1 style="color:red;font-weight:bold">ERROR: MAIN BATTERY FAULT</h1>
		</div>
	}
	<div class="additional-speedometers">
		<div class="additional-speedometer">
			<div class="value">@telemetry.CabinTemperature</div>
			<div class="label">Cabin Temp &degC</div>
		</div>
		<div class="speedometer">
			<div class="value @(steering.CruiseActive ? "cruise-active" : string.Empty)">@((int)(ws.VehicleVelocity * Conversions.MpsToMph))</div>
			<div class="label">mph</div>
		</div>
		<div class="speedometer">
			<div class="value">@((ws.BusCurrent).ToString("N1"))</div>
			<div class="label">A</div>
		</div>
		<div class="additional-speedometer">
			<div class="value">@((-battery.Current).ToString("N1"))</div>
			<div class="label">Battery (A)</div>
		</div>
	</div>
	<div class="row-data">
		<h1 style="@(!steering.CruiseActive ? "color: white" : string.Empty)">Cruise Control: @((int)(steering.TargetSpeed * Conversions.MpsToMph)) mph</h1>
	</div>
	<div class="row-data">
		<div class="symbol"><h1><Icon Name="IconName.Battery" Color="IconColor.Muted" /></h1></div>
		<div class="symbol"><h1><Icon Name="IconName.BrightnessHigh" Color="IconColor.Muted" /></h1></div>
		<div class="symbol"><h1><Icon Name="IconName.ExclamationTriangle" Color="IconColor.Muted" /></h1></div>
		<div class="symbol"><h1><Icon Name="IconName.Gear" Color="IconColor.Muted" /></h1></div>
		<div class="symbol"><h1><Icon Name="IconName.ThermometerHigh" Color="IconColor.Muted" /></h1></div>
	</div>
	<div class="row-data">
		<div class="symbol"><h4>Battery Temperature: @battery.HighTemperature&degC</h4></div>
	</div>
	<div class="row-data">
		@foreach(var warning in battery.GetWarnings())
		{
			<div class="warning-col">
				<h5 class="@(warning.WarningType == WarningType.Warning ? "text-warning" : "error")">@warning.Message</h5>
			</div>
		}
		@foreach (var warning in ws.GetWarnings())
		{
			<div class="warning-col">
				<h5 class="@(warning.WarningType == WarningType.Warning ? "text-warning" : "error")">@warning.Message</h5>
			</div>
		}
	</div>
	@*<div class="row-data">
	<div class="symbol"><h4>Main: @distribution.MainVoltage.ToString("N2")V, @((int)distribution.MainPower)W</h4></div>
	</div>*@
</div>
<div class="bottom-info">
	<div class="bottom-info-item">
		Pedal Percent: @encoder.Percentage.ToString("P0")
	</div>
	<div class="bottom-info-item">
		Motor Errors: @ws.ErrorFlags
	</div>
	<div class="bottom-info-item">
		Motor Limits: @ws.LimitFlags
	</div>
	<div class="bottom-info-item">
		Bus Voltage: @(ws.BusVoltage.ToString("N1"))V
	</div>
</div>

@code {
	CancellationTokenSource CancellationSource = new();

	// Not called On page change, but called when the component is no longer needed
	public void Dispose()
	{
		CancellationSource.Cancel();
		backgroundData.OnChange -= StateHasChanged;

		NavigationManager.LocationChanged -= OnLocationChanged;

		CancellationSource.Dispose();
	}
	protected override async void OnInitialized()
	{
		backgroundData.OnChange += StateHasChanged;
		await backgroundData.StartAsync(CancellationSource.Token);

		NavigationManager.LocationChanged += OnLocationChanged;
	}

	protected void OnLocationChanged(object sender, LocationChangedEventArgs args)
	{
		NavigationManager.LocationChanged -= OnLocationChanged;
		string navigationMethod = args.IsNavigationIntercepted ? "HTML" : "code";
	}
}
